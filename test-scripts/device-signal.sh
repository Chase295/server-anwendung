#!/bin/bash

# IoT Orchestrator Signal Device Client Launcher
# ==============================================
# Startet das Python-Script f√ºr ein Device mit Signal-Integration

echo "üì± IoT Orchestrator Signal Device Client"
echo "========================================"
echo ""
echo "Dieses Script startet ein Device mit:"
echo "  ‚Ä¢ Signal-Empfang (empf√§ngt Signal-Nachrichten)"
echo "  ‚Ä¢ Signal-Senden (sendet TXT Output √ºber Signal)"
echo "  ‚Ä¢ TXT Input/Output f√ºr IoT Orchestrator"
echo ""

# Pr√ºfe ob Python verf√ºgbar ist
if ! command -v python3 &> /dev/null; then
    echo "‚ùå Python 3 ist nicht verf√ºgbar!"
    echo "   Installiere Python 3 und versuche es erneut."
    exit 1
fi

# Pr√ºfe ob das Python-Script existiert
SCRIPT_PATH="$(dirname "$0")/device-signal.py"
if [ ! -f "$SCRIPT_PATH" ]; then
    echo "‚ùå Python-Script nicht gefunden: $SCRIPT_PATH"
    echo "   Stelle sicher, dass du im richtigen Verzeichnis bist."
    exit 1
fi

echo "üìã Voraussetzungen:"
echo "   ‚Ä¢ WebSocket-Client: pip install websockets"
echo "   ‚Ä¢ HTTP-Client: pip install httpx"
echo "   ‚Ä¢ Aktiver IoT Orchestrator WebSocket-Server auf Port 8080"
echo "   ‚Ä¢ Signal-Server erreichbar (signal.local.chase295.de)"
echo ""

# Pr√ºfe ob erforderliche Pakete installiert sind
echo "üîç Pr√ºfe Abh√§ngigkeiten..."

python3 -c "import websockets" 2>/dev/null
if [ $? -ne 0 ]; then
    echo "‚ö†Ô∏è  websockets ist nicht installiert!"
    echo "   Installiere mit: pip install websockets"
    echo ""
    read -p "Fortfahren trotzdem? (j/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Jj]$ ]]; then
        exit 1
    fi
fi

python3 -c "import httpx" 2>/dev/null
if [ $? -ne 0 ]; then
    echo "‚ö†Ô∏è  httpx ist nicht installiert!"
    echo "   Installiere mit: pip install httpx"
    echo ""
    read -p "Fortfahren trotzdem? (j/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Jj]$ ]]; then
        exit 1
    fi
fi

echo ""
echo "üîó Konfiguration (aus device-signal.py):"
echo "   ‚Ä¢ IoT Orchestrator: ws://10.0.3.17:8080/ws/external"
echo "   ‚Ä¢ Signal-Empfang: wss://signal.local.chase295.de/v1/receive/+4915122215051"
echo "   ‚Ä¢ Signal-Senden: https://signal.local.chase295.de/v2/send"
echo "   ‚Ä¢ Signal-Nummer (Empfang): +4915122215051"
echo "   ‚Ä¢ Signal-Nummer (Senden): +4915122215051"
echo "   ‚Ä¢ Standard-Empf√§nger: +4917681328005"
echo ""
echo "üí° Funktionsweise:"
echo "   ‚Ä¢ Signal-Nachrichten ‚Üí IoT Orchestrator (txt_input)"
echo "   ‚Ä¢ IoT Orchestrator TXT Output ‚Üí Signal (txt_output)"
echo ""
echo "‚ö†Ô∏è  WICHTIG:"
echo "   ‚Ä¢ Device wird als 'signal-device' in TXT Input/Output Nodes sichtbar"
echo "   ‚Ä¢ Stelle sicher, dass client_secret_signal-device in der DB gespeichert ist"
echo "   ‚Ä¢ Stelle sicher, dass der Backend-Server l√§uft"
echo "   ‚Ä¢ Stelle sicher, dass der Signal-Server erreichbar ist"
echo "   ‚Ä¢ Signal-Nummern in device-signal.py konfigurieren falls n√∂tig"
echo ""

# Pr√ºfe ob Signal-Server erreichbar ist (optional)
echo "üåê Pr√ºfe Signal-Server-Verbindung..."
if command -v curl &> /dev/null; then
    # Pr√ºfe Signal API (ohne Fehlerbehandlung, da es nur eine Info ist)
    curl -s --head --max-time 3 "https://signal.local.chase295.de/v2/send" > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        echo "   ‚úì Signal-Server erreichbar"
    else
        echo "   ‚ö†Ô∏è  Signal-Server m√∂glicherweise nicht erreichbar"
        echo "      √úberpr√ºfe die Verbindung oder die URL"
    fi
else
    echo "   ‚ÑπÔ∏è  curl nicht verf√ºgbar - kann Signal-Server-Verbindung nicht pr√ºfen"
fi

echo ""
echo "üöÄ Starte Signal Device-Client..."
echo ""

# Script ausf√ºhren
python3 "$SCRIPT_PATH"

echo ""
echo "‚úÖ Signal Device-Client beendet."
echo ""
echo "üìñ Mehr Informationen:"
echo "   ‚Ä¢ Siehe device-signal.py f√ºr Konfiguration"
echo "   ‚Ä¢ Device-Name, Signal-Nummern und API-Key in der Python-Datei anpassen"
echo ""

